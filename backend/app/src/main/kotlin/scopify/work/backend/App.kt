/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package scopify.work.backend

import io.ktor.application.*
import io.ktor.application.install
import io.ktor.gson.*
import io.ktor.response.*
import com.apurebase.kgraphql.GraphQL
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.routing.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import scopify.work.backend.graphql.scopeSchema

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

data class Healthcheck(val ok: Boolean = true)

fun main(args: Array<String>) {
    val port = Integer.valueOf(System.getenv("PORT") ?: "8004")
    embeddedServer(Netty, port = port) {

        install(CallLogging)
        install(StatusPages) {
            exception<Throwable> { cause ->
                call.respond(HttpStatusCode.InternalServerError, "Internal Server Error")
                throw cause
            }
        }
        install(ContentNegotiation) {
            gson()
        }
        install(CORS) {
            header("Content-Type")
            header("Access-Control-Allow-Origin")
            method(HttpMethod.Post)
            method(HttpMethod.Options)
            host("localhost:3001", schemes = listOf("http", "https"))
            host("scopify.work", schemes = listOf("https"))
        }

        install(GraphQL) {
            useDefaultPrettyPrinter = true
            playground = true
            endpoint = "/graphql"
            schema {
                scopeSchema()
            }
        }

        routing {
            get("/health") {
                call.respond(Healthcheck())
            }
        }
    }.start(wait = false)
}
